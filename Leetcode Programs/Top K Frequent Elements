class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] result = new int[k];
    
        if (nums.length == 1) {
            result[0] = nums[0];
            return result;
        }

        Map<Integer,Integer> map=new TreeMap<>();
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }

        PriorityQueue<Map.Entry<Integer,Integer>> pq 
            = new PriorityQueue<>((a,b)->b.getValue()-a.getValue());
        
        for(Map.Entry entry : map.entrySet()){
            pq.add(entry);
        }
        System.out.println(pq.toString());

        for(int i=0; i<k; i++){
            result[i]=pq.poll().getKey();
        }

        return result;
    }
}
