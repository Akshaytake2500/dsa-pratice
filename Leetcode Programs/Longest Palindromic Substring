class Solution {
    public String longestPalindrome(String s) {
        if (s.length() <= 1) {
            return s;
        }
        String lps = "";
        int low;
        int high;
        for (int i = 1; i < s.length(); i++)
         {
            // for odd numbers
            low = i;
            high = i;
            while (s.charAt(low) == s.charAt(high)) {
                low--;
                high++;
                if (low == -1 || high == s.length()) {
                    break;
                }
            }
            String palindrome = s.substring(low + 1, high);
            if (palindrome.length() > lps.length()) {
                lps = palindrome;
            }
        }
        for (int i = 1; i < s.length(); i++) 
        {
            low = i - 1;
            high = i;
            while (s.charAt(low) == s.charAt(high)) {
                low--;
                high++;
                if (low == -1 || high == s.length()) {
                    break;
                }
            }
            String palindrome = s.substring(low + 1, high);
            if (palindrome.length() > lps.length()) {
                lps = palindrome;
            }
        }

        // if (s.length() <= 1)
        // return s;
        // String lps = "";
        // for (int i = 0; i < s.length(); i++) {
        // lps = updateLongest(s, i, i, lps); // Odd-length palindromes
        // lps = updateLongest(s, i - 1, i, lps); // Even-length palindromes
        // }
        // return lps;
        // }

        // private String updateLongest(String s, int low, int high, String lps) {
        // while (low >= 0 && high < s.length() && s.charAt(low) == s.charAt(high)) {
        // low--;
        // high++;
        // }
        // String palindrome = s.substring(low + 1, high);

        // if (palindrome.length() > lps.length()) {
        // lps = palindrome;
        // }
        return lps;
    }
}
